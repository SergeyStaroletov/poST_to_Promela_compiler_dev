/**
 * generated by Xtext 2.26.0
 */
package iae.post.poST.util;

import iae.post.poST.AddExpression;
import iae.post.poST.AndExpression;
import iae.post.poST.ArrayInitialization;
import iae.post.poST.ArrayInterval;
import iae.post.poST.ArraySpecification;
import iae.post.poST.ArraySpecificationInit;
import iae.post.poST.ArrayVariable;
import iae.post.poST.AssignmentStatement;
import iae.post.poST.AttachVariableConfElement;
import iae.post.poST.CaseElement;
import iae.post.poST.CaseList;
import iae.post.poST.CaseStatement;
import iae.post.poST.CompExpression;
import iae.post.poST.Configuration;
import iae.post.poST.Constant;
import iae.post.poST.EquExpression;
import iae.post.poST.ErrorProcessStatement;
import iae.post.poST.ExitStatement;
import iae.post.poST.Expression;
import iae.post.poST.ExternalVarDeclaration;
import iae.post.poST.ExternalVarInitDeclaration;
import iae.post.poST.FBInvocation;
import iae.post.poST.ForList;
import iae.post.poST.ForStatement;
import iae.post.poST.Function;
import iae.post.poST.FunctionBlock;
import iae.post.poST.FunctionCall;
import iae.post.poST.GlobalVarDeclaration;
import iae.post.poST.GlobalVarInitDeclaration;
import iae.post.poST.IfStatement;
import iae.post.poST.InputOutputVarDeclaration;
import iae.post.poST.InputVarDeclaration;
import iae.post.poST.IntegerLiteral;
import iae.post.poST.IterationStatement;
import iae.post.poST.Model;
import iae.post.poST.MulExpression;
import iae.post.poST.NumericLiteral;
import iae.post.poST.OutputVarDeclaration;
import iae.post.poST.ParamAssignment;
import iae.post.poST.ParamAssignmentElements;
import iae.post.poST.PoSTPackage;
import iae.post.poST.PowerExpression;
import iae.post.poST.PrimaryExpression;
import iae.post.poST.ProcessStatements;
import iae.post.poST.ProcessStatusExpression;
import iae.post.poST.ProcessVarDeclaration;
import iae.post.poST.ProcessVarInitDeclaration;
import iae.post.poST.ProcessVarList;
import iae.post.poST.ProcessVariable;
import iae.post.poST.Program;
import iae.post.poST.ProgramConfElement;
import iae.post.poST.ProgramConfElements;
import iae.post.poST.ProgramConfiguration;
import iae.post.poST.RealLiteral;
import iae.post.poST.RepeatStatement;
import iae.post.poST.ResetTimerStatement;
import iae.post.poST.Resource;
import iae.post.poST.SelectionStatement;
import iae.post.poST.SetStateStatement;
import iae.post.poST.SignedInteger;
import iae.post.poST.SimpleSpecificationInit;
import iae.post.poST.SingleResource;
import iae.post.poST.StartProcessStatement;
import iae.post.poST.State;
import iae.post.poST.Statement;
import iae.post.poST.StatementList;
import iae.post.poST.StopProcessStatement;
import iae.post.poST.SubprogramControlStatement;
import iae.post.poST.SymbolicVariable;
import iae.post.poST.Task;
import iae.post.poST.TaskInitialization;
import iae.post.poST.TempVarDeclaration;
import iae.post.poST.TemplateProcessAttachVariableConfElement;
import iae.post.poST.TemplateProcessConfElement;
import iae.post.poST.TemplateProcessElements;
import iae.post.poST.TimeLiteral;
import iae.post.poST.TimeoutStatement;
import iae.post.poST.UnaryExpression;
import iae.post.poST.VarDeclaration;
import iae.post.poST.VarInitDeclaration;
import iae.post.poST.VarList;
import iae.post.poST.Variable;
import iae.post.poST.WhileStatement;
import iae.post.poST.XorExpression;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see iae.post.poST.PoSTPackage
 * @generated
 */
public class PoSTAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PoSTPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PoSTAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PoSTPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PoSTSwitch<Adapter> modelSwitch =
    new PoSTSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseConfiguration(Configuration object)
      {
        return createConfigurationAdapter();
      }
      @Override
      public Adapter caseResource(Resource object)
      {
        return createResourceAdapter();
      }
      @Override
      public Adapter caseSingleResource(SingleResource object)
      {
        return createSingleResourceAdapter();
      }
      @Override
      public Adapter caseTask(Task object)
      {
        return createTaskAdapter();
      }
      @Override
      public Adapter caseTaskInitialization(TaskInitialization object)
      {
        return createTaskInitializationAdapter();
      }
      @Override
      public Adapter caseProgramConfiguration(ProgramConfiguration object)
      {
        return createProgramConfigurationAdapter();
      }
      @Override
      public Adapter caseProgramConfElements(ProgramConfElements object)
      {
        return createProgramConfElementsAdapter();
      }
      @Override
      public Adapter caseProgramConfElement(ProgramConfElement object)
      {
        return createProgramConfElementAdapter();
      }
      @Override
      public Adapter caseAttachVariableConfElement(AttachVariableConfElement object)
      {
        return createAttachVariableConfElementAdapter();
      }
      @Override
      public Adapter caseTemplateProcessConfElement(TemplateProcessConfElement object)
      {
        return createTemplateProcessConfElementAdapter();
      }
      @Override
      public Adapter caseTemplateProcessElements(TemplateProcessElements object)
      {
        return createTemplateProcessElementsAdapter();
      }
      @Override
      public Adapter caseTemplateProcessAttachVariableConfElement(TemplateProcessAttachVariableConfElement object)
      {
        return createTemplateProcessAttachVariableConfElementAdapter();
      }
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter caseFunctionBlock(FunctionBlock object)
      {
        return createFunctionBlockAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseProcess(iae.post.poST.Process object)
      {
        return createProcessAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseSetStateStatement(SetStateStatement object)
      {
        return createSetStateStatementAdapter();
      }
      @Override
      public Adapter caseProcessStatements(ProcessStatements object)
      {
        return createProcessStatementsAdapter();
      }
      @Override
      public Adapter caseProcessStatusExpression(ProcessStatusExpression object)
      {
        return createProcessStatusExpressionAdapter();
      }
      @Override
      public Adapter caseStartProcessStatement(StartProcessStatement object)
      {
        return createStartProcessStatementAdapter();
      }
      @Override
      public Adapter caseStopProcessStatement(StopProcessStatement object)
      {
        return createStopProcessStatementAdapter();
      }
      @Override
      public Adapter caseErrorProcessStatement(ErrorProcessStatement object)
      {
        return createErrorProcessStatementAdapter();
      }
      @Override
      public Adapter caseTimeoutStatement(TimeoutStatement object)
      {
        return createTimeoutStatementAdapter();
      }
      @Override
      public Adapter caseResetTimerStatement(ResetTimerStatement object)
      {
        return createResetTimerStatementAdapter();
      }
      @Override
      public Adapter caseFBInvocation(FBInvocation object)
      {
        return createFBInvocationAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseParamAssignmentElements(ParamAssignmentElements object)
      {
        return createParamAssignmentElementsAdapter();
      }
      @Override
      public Adapter caseParamAssignment(ParamAssignment object)
      {
        return createParamAssignmentAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseXorExpression(XorExpression object)
      {
        return createXorExpressionAdapter();
      }
      @Override
      public Adapter caseAndExpression(AndExpression object)
      {
        return createAndExpressionAdapter();
      }
      @Override
      public Adapter caseCompExpression(CompExpression object)
      {
        return createCompExpressionAdapter();
      }
      @Override
      public Adapter caseEquExpression(EquExpression object)
      {
        return createEquExpressionAdapter();
      }
      @Override
      public Adapter caseAddExpression(AddExpression object)
      {
        return createAddExpressionAdapter();
      }
      @Override
      public Adapter caseMulExpression(MulExpression object)
      {
        return createMulExpressionAdapter();
      }
      @Override
      public Adapter casePowerExpression(PowerExpression object)
      {
        return createPowerExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryExpression(UnaryExpression object)
      {
        return createUnaryExpressionAdapter();
      }
      @Override
      public Adapter casePrimaryExpression(PrimaryExpression object)
      {
        return createPrimaryExpressionAdapter();
      }
      @Override
      public Adapter caseStatementList(StatementList object)
      {
        return createStatementListAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseAssignmentStatement(AssignmentStatement object)
      {
        return createAssignmentStatementAdapter();
      }
      @Override
      public Adapter caseSelectionStatement(SelectionStatement object)
      {
        return createSelectionStatementAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseCaseStatement(CaseStatement object)
      {
        return createCaseStatementAdapter();
      }
      @Override
      public Adapter caseCaseElement(CaseElement object)
      {
        return createCaseElementAdapter();
      }
      @Override
      public Adapter caseCaseList(CaseList object)
      {
        return createCaseListAdapter();
      }
      @Override
      public Adapter caseIterationStatement(IterationStatement object)
      {
        return createIterationStatementAdapter();
      }
      @Override
      public Adapter caseForStatement(ForStatement object)
      {
        return createForStatementAdapter();
      }
      @Override
      public Adapter caseForList(ForList object)
      {
        return createForListAdapter();
      }
      @Override
      public Adapter caseWhileStatement(WhileStatement object)
      {
        return createWhileStatementAdapter();
      }
      @Override
      public Adapter caseRepeatStatement(RepeatStatement object)
      {
        return createRepeatStatementAdapter();
      }
      @Override
      public Adapter caseSubprogramControlStatement(SubprogramControlStatement object)
      {
        return createSubprogramControlStatementAdapter();
      }
      @Override
      public Adapter caseExitStatement(ExitStatement object)
      {
        return createExitStatementAdapter();
      }
      @Override
      public Adapter caseSymbolicVariable(SymbolicVariable object)
      {
        return createSymbolicVariableAdapter();
      }
      @Override
      public Adapter caseSimpleSpecificationInit(SimpleSpecificationInit object)
      {
        return createSimpleSpecificationInitAdapter();
      }
      @Override
      public Adapter caseVarList(VarList object)
      {
        return createVarListAdapter();
      }
      @Override
      public Adapter caseVarInitDeclaration(VarInitDeclaration object)
      {
        return createVarInitDeclarationAdapter();
      }
      @Override
      public Adapter caseInputVarDeclaration(InputVarDeclaration object)
      {
        return createInputVarDeclarationAdapter();
      }
      @Override
      public Adapter caseOutputVarDeclaration(OutputVarDeclaration object)
      {
        return createOutputVarDeclarationAdapter();
      }
      @Override
      public Adapter caseInputOutputVarDeclaration(InputOutputVarDeclaration object)
      {
        return createInputOutputVarDeclarationAdapter();
      }
      @Override
      public Adapter caseVarDeclaration(VarDeclaration object)
      {
        return createVarDeclarationAdapter();
      }
      @Override
      public Adapter caseTempVarDeclaration(TempVarDeclaration object)
      {
        return createTempVarDeclarationAdapter();
      }
      @Override
      public Adapter caseExternalVarInitDeclaration(ExternalVarInitDeclaration object)
      {
        return createExternalVarInitDeclarationAdapter();
      }
      @Override
      public Adapter caseExternalVarDeclaration(ExternalVarDeclaration object)
      {
        return createExternalVarDeclarationAdapter();
      }
      @Override
      public Adapter caseGlobalVarInitDeclaration(GlobalVarInitDeclaration object)
      {
        return createGlobalVarInitDeclarationAdapter();
      }
      @Override
      public Adapter caseGlobalVarDeclaration(GlobalVarDeclaration object)
      {
        return createGlobalVarDeclarationAdapter();
      }
      @Override
      public Adapter caseProcessVariable(ProcessVariable object)
      {
        return createProcessVariableAdapter();
      }
      @Override
      public Adapter caseProcessVarList(ProcessVarList object)
      {
        return createProcessVarListAdapter();
      }
      @Override
      public Adapter caseProcessVarInitDeclaration(ProcessVarInitDeclaration object)
      {
        return createProcessVarInitDeclarationAdapter();
      }
      @Override
      public Adapter caseProcessVarDeclaration(ProcessVarDeclaration object)
      {
        return createProcessVarDeclarationAdapter();
      }
      @Override
      public Adapter caseArrayVariable(ArrayVariable object)
      {
        return createArrayVariableAdapter();
      }
      @Override
      public Adapter caseArraySpecificationInit(ArraySpecificationInit object)
      {
        return createArraySpecificationInitAdapter();
      }
      @Override
      public Adapter caseArraySpecification(ArraySpecification object)
      {
        return createArraySpecificationAdapter();
      }
      @Override
      public Adapter caseArrayInterval(ArrayInterval object)
      {
        return createArrayIntervalAdapter();
      }
      @Override
      public Adapter caseArrayInitialization(ArrayInitialization object)
      {
        return createArrayInitializationAdapter();
      }
      @Override
      public Adapter caseTimeLiteral(TimeLiteral object)
      {
        return createTimeLiteralAdapter();
      }
      @Override
      public Adapter caseConstant(Constant object)
      {
        return createConstantAdapter();
      }
      @Override
      public Adapter caseSignedInteger(SignedInteger object)
      {
        return createSignedIntegerAdapter();
      }
      @Override
      public Adapter caseNumericLiteral(NumericLiteral object)
      {
        return createNumericLiteralAdapter();
      }
      @Override
      public Adapter caseIntegerLiteral(IntegerLiteral object)
      {
        return createIntegerLiteralAdapter();
      }
      @Override
      public Adapter caseRealLiteral(RealLiteral object)
      {
        return createRealLiteralAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Configuration <em>Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Configuration
   * @generated
   */
  public Adapter createConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Resource <em>Resource</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Resource
   * @generated
   */
  public Adapter createResourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.SingleResource <em>Single Resource</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.SingleResource
   * @generated
   */
  public Adapter createSingleResourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Task <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Task
   * @generated
   */
  public Adapter createTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.TaskInitialization <em>Task Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.TaskInitialization
   * @generated
   */
  public Adapter createTaskInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProgramConfiguration <em>Program Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProgramConfiguration
   * @generated
   */
  public Adapter createProgramConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProgramConfElements <em>Program Conf Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProgramConfElements
   * @generated
   */
  public Adapter createProgramConfElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProgramConfElement <em>Program Conf Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProgramConfElement
   * @generated
   */
  public Adapter createProgramConfElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.AttachVariableConfElement <em>Attach Variable Conf Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.AttachVariableConfElement
   * @generated
   */
  public Adapter createAttachVariableConfElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.TemplateProcessConfElement <em>Template Process Conf Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.TemplateProcessConfElement
   * @generated
   */
  public Adapter createTemplateProcessConfElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.TemplateProcessElements <em>Template Process Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.TemplateProcessElements
   * @generated
   */
  public Adapter createTemplateProcessElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.TemplateProcessAttachVariableConfElement <em>Template Process Attach Variable Conf Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.TemplateProcessAttachVariableConfElement
   * @generated
   */
  public Adapter createTemplateProcessAttachVariableConfElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.FunctionBlock <em>Function Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.FunctionBlock
   * @generated
   */
  public Adapter createFunctionBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Process <em>Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Process
   * @generated
   */
  public Adapter createProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.SetStateStatement <em>Set State Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.SetStateStatement
   * @generated
   */
  public Adapter createSetStateStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProcessStatements <em>Process Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProcessStatements
   * @generated
   */
  public Adapter createProcessStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProcessStatusExpression <em>Process Status Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProcessStatusExpression
   * @generated
   */
  public Adapter createProcessStatusExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.StartProcessStatement <em>Start Process Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.StartProcessStatement
   * @generated
   */
  public Adapter createStartProcessStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.StopProcessStatement <em>Stop Process Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.StopProcessStatement
   * @generated
   */
  public Adapter createStopProcessStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ErrorProcessStatement <em>Error Process Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ErrorProcessStatement
   * @generated
   */
  public Adapter createErrorProcessStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.TimeoutStatement <em>Timeout Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.TimeoutStatement
   * @generated
   */
  public Adapter createTimeoutStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ResetTimerStatement <em>Reset Timer Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ResetTimerStatement
   * @generated
   */
  public Adapter createResetTimerStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.FBInvocation <em>FB Invocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.FBInvocation
   * @generated
   */
  public Adapter createFBInvocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ParamAssignmentElements <em>Param Assignment Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ParamAssignmentElements
   * @generated
   */
  public Adapter createParamAssignmentElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ParamAssignment <em>Param Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ParamAssignment
   * @generated
   */
  public Adapter createParamAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.XorExpression <em>Xor Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.XorExpression
   * @generated
   */
  public Adapter createXorExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.AndExpression <em>And Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.AndExpression
   * @generated
   */
  public Adapter createAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.CompExpression <em>Comp Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.CompExpression
   * @generated
   */
  public Adapter createCompExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.EquExpression <em>Equ Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.EquExpression
   * @generated
   */
  public Adapter createEquExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.AddExpression <em>Add Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.AddExpression
   * @generated
   */
  public Adapter createAddExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.MulExpression <em>Mul Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.MulExpression
   * @generated
   */
  public Adapter createMulExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.PowerExpression <em>Power Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.PowerExpression
   * @generated
   */
  public Adapter createPowerExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.UnaryExpression <em>Unary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.UnaryExpression
   * @generated
   */
  public Adapter createUnaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.PrimaryExpression <em>Primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.PrimaryExpression
   * @generated
   */
  public Adapter createPrimaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.StatementList <em>Statement List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.StatementList
   * @generated
   */
  public Adapter createStatementListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.AssignmentStatement <em>Assignment Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.AssignmentStatement
   * @generated
   */
  public Adapter createAssignmentStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.SelectionStatement <em>Selection Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.SelectionStatement
   * @generated
   */
  public Adapter createSelectionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.CaseStatement <em>Case Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.CaseStatement
   * @generated
   */
  public Adapter createCaseStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.CaseElement <em>Case Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.CaseElement
   * @generated
   */
  public Adapter createCaseElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.CaseList <em>Case List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.CaseList
   * @generated
   */
  public Adapter createCaseListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.IterationStatement <em>Iteration Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.IterationStatement
   * @generated
   */
  public Adapter createIterationStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ForStatement <em>For Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ForStatement
   * @generated
   */
  public Adapter createForStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ForList <em>For List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ForList
   * @generated
   */
  public Adapter createForListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.WhileStatement <em>While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.WhileStatement
   * @generated
   */
  public Adapter createWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.RepeatStatement <em>Repeat Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.RepeatStatement
   * @generated
   */
  public Adapter createRepeatStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.SubprogramControlStatement <em>Subprogram Control Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.SubprogramControlStatement
   * @generated
   */
  public Adapter createSubprogramControlStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ExitStatement <em>Exit Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ExitStatement
   * @generated
   */
  public Adapter createExitStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.SymbolicVariable <em>Symbolic Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.SymbolicVariable
   * @generated
   */
  public Adapter createSymbolicVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.SimpleSpecificationInit <em>Simple Specification Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.SimpleSpecificationInit
   * @generated
   */
  public Adapter createSimpleSpecificationInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.VarList <em>Var List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.VarList
   * @generated
   */
  public Adapter createVarListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.VarInitDeclaration <em>Var Init Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.VarInitDeclaration
   * @generated
   */
  public Adapter createVarInitDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.InputVarDeclaration <em>Input Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.InputVarDeclaration
   * @generated
   */
  public Adapter createInputVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.OutputVarDeclaration <em>Output Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.OutputVarDeclaration
   * @generated
   */
  public Adapter createOutputVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.InputOutputVarDeclaration <em>Input Output Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.InputOutputVarDeclaration
   * @generated
   */
  public Adapter createInputOutputVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.VarDeclaration <em>Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.VarDeclaration
   * @generated
   */
  public Adapter createVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.TempVarDeclaration <em>Temp Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.TempVarDeclaration
   * @generated
   */
  public Adapter createTempVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ExternalVarInitDeclaration <em>External Var Init Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ExternalVarInitDeclaration
   * @generated
   */
  public Adapter createExternalVarInitDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ExternalVarDeclaration <em>External Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ExternalVarDeclaration
   * @generated
   */
  public Adapter createExternalVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.GlobalVarInitDeclaration <em>Global Var Init Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.GlobalVarInitDeclaration
   * @generated
   */
  public Adapter createGlobalVarInitDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.GlobalVarDeclaration <em>Global Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.GlobalVarDeclaration
   * @generated
   */
  public Adapter createGlobalVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProcessVariable <em>Process Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProcessVariable
   * @generated
   */
  public Adapter createProcessVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProcessVarList <em>Process Var List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProcessVarList
   * @generated
   */
  public Adapter createProcessVarListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProcessVarInitDeclaration <em>Process Var Init Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProcessVarInitDeclaration
   * @generated
   */
  public Adapter createProcessVarInitDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ProcessVarDeclaration <em>Process Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ProcessVarDeclaration
   * @generated
   */
  public Adapter createProcessVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ArrayVariable <em>Array Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ArrayVariable
   * @generated
   */
  public Adapter createArrayVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ArraySpecificationInit <em>Array Specification Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ArraySpecificationInit
   * @generated
   */
  public Adapter createArraySpecificationInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ArraySpecification <em>Array Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ArraySpecification
   * @generated
   */
  public Adapter createArraySpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ArrayInterval <em>Array Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ArrayInterval
   * @generated
   */
  public Adapter createArrayIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.ArrayInitialization <em>Array Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.ArrayInitialization
   * @generated
   */
  public Adapter createArrayInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.TimeLiteral <em>Time Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.TimeLiteral
   * @generated
   */
  public Adapter createTimeLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.Constant
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.SignedInteger <em>Signed Integer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.SignedInteger
   * @generated
   */
  public Adapter createSignedIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.NumericLiteral <em>Numeric Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.NumericLiteral
   * @generated
   */
  public Adapter createNumericLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.IntegerLiteral <em>Integer Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.IntegerLiteral
   * @generated
   */
  public Adapter createIntegerLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link iae.post.poST.RealLiteral <em>Real Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see iae.post.poST.RealLiteral
   * @generated
   */
  public Adapter createRealLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PoSTAdapterFactory
